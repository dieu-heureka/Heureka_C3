{
	"info": {
		"_postman_id": "58529586-c139-4ecd-afd0-10faedc8d12b",
		"name": "Loxxess.Lx1.LosConnector",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Article",
			"item": [
				{
					"name": "Create Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Article was created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"$articleId = pm.variables.get(\"articleId\");\r",
									"\r",
									"$expectedLength = pm.variables.get(\"length\");\r",
									"$expectedHeight = pm.variables.get(\"height\");\r",
									"$expectedWidth = pm.variables.get(\"width\");\r",
									"$expectedWeight = pm.variables.get(\"weight\");\r",
									"$expectedPiecesPerStorageBox = pm.variables.get(\"piecesPerStorageBox\");\r",
									"$expectedPlannedSalesPerWeek = pm.variables.get(\"plannedSalesPerWeek\");\r",
									"$expectedMinimumIncomingAmount = pm.variables.get(\"minimumIncomingAmount\");\r",
									"$expectedStatus = pm.variables.get(\"status\");\r",
									"$expectedCategory = pm.variables.get(\"category\");\r",
									"\r",
									"$expectedClientId = pm.collectionVariables.get(\"clientId\");\r",
									"\r",
									"const body = pm.response.json();\r",
									"\r",
									"pm.test(\"articleId is correct\", function () {\r",
									"    pm.expect(body.articleId).to.eql($articleId.toString());\r",
									"});\r",
									" \r",
									"pm.test(\"clientId is correct\", function () {\r",
									"    pm.expect(body.clientId).to.eql($expectedClientId.toString());\r",
									"});\r",
									" \r",
									"pm.test(\"category is correct\", function () {\r",
									"    pm.expect(body.category).to.eql($expectedCategory);\r",
									"});\r",
									"\r",
									"pm.test(\"riskClass is correct\", function () {\r",
									"    pm.expect(body.riskClass).to.eql(\"1\");\r",
									"});\r",
									"\r",
									"pm.test(\"dangerousGoods is correct\", function () {\r",
									"    pm.expect(body.dangerousGoods).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"bulkGoods is correct\", function () {\r",
									"    pm.expect(body.bulkGoods).to.eql(false);\r",
									"});\r",
									"\r",
									"pm.test(\"status is correct\", function () {\r",
									"    pm.expect(body.status).to.eql($expectedStatus);\r",
									"});\r",
									"\r",
									"pm.test(\"unit default is PCS\", function () {\r",
									"    pm.expect(body.unit.unit).to.eql(\"PCS\");\r",
									"});\r",
									"\r",
									"pm.test(\"length is correct\", function () {\r",
									"    pm.expect(body.unit.length).to.eql($expectedLength);\r",
									"});\r",
									"\r",
									"pm.test(\"height is correct\", function () {\r",
									"    pm.expect(body.unit.height).to.eql($expectedHeight);\r",
									"});\r",
									"\r",
									"pm.test(\"width is correct\", function () {\r",
									"    pm.expect(body.unit.width).to.eql($expectedWidth);\r",
									"});\r",
									"\r",
									"pm.test(\"weight is correct\", function () {\r",
									"    pm.expect(body.unit.weight).to.eql($expectedWeight);\r",
									"});\r",
									"\r",
									"pm.test(\"piecesPerStorageBox is correct\", function () {\r",
									"    pm.expect(body.whArticle.piecesPerStorageBox).to.eql($expectedPiecesPerStorageBox);\r",
									"});\r",
									"\r",
									"pm.test(\"plannedSalesPerWeek is correct\", function () {\r",
									"    pm.expect(body.whArticle.plannedSalesPerWeek).to.eql($expectedPlannedSalesPerWeek);\r",
									"});\r",
									"\r",
									"pm.test(\"minimumIncomingAmount is correct\", function () {\r",
									"    pm.expect(body.whArticle.minimumIncomingAmount).to.eql($expectedMinimumIncomingAmount);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var articleId = uuid.v4();\r",
									"\r",
									"pm.collectionVariables.set(\"ARTILE_ID\", articleId);\r",
									"\r",
									"pm.variables.set(\"articleId\", articleId);\r",
									"pm.variables.set(\"length\", _.random(20,500));\r",
									"pm.variables.set(\"width\", _.random(20,500));\r",
									"pm.variables.set(\"height\", _.random(20,500));\r",
									"pm.variables.set(\"weight\", _.random(100,1000));\r",
									"pm.variables.set(\"piecesPerStorageBox\", _.random(1,500));\r",
									"pm.variables.set(\"plannedSalesPerWeek\", _.random(1,200000));\r",
									"pm.variables.set(\"minimumIncomingAmount\", _.random(1,1000));\r",
									"\r",
									"var categories = [\"Lebensmittel\", \"Tiernahrung\", \"Kitex\"];\r",
									"pm.variables.set(\"category\", categories[Math.floor(Math.random() * categories.length)]);\r",
									"\r",
									"var statuses = [\"active\", \"inactive\"];\r",
									"pm.variables.set(\"status\", statuses[Math.floor(Math.random() * statuses.length)]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"length\": {{length}},\r\n    \"width\": {{width}},\r\n    \"height\": {{height}},\r\n    \"weight\": {{weight}},\r\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\r\n    \"category\": \"{{category}}\",\r\n    \"dangerousGoods\": \"1\",\r\n    \"plannedSalesPerWeek\": {{plannedSalesPerWeek}},\r\n    \"minimumIncomingAmount\": {{minimumIncomingAmount}},\r\n    \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/articles?articleId={{articleId}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "articleId",
									"value": "{{articleId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Article was created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"$articleId = pm.collectionVariables.get(\"ARTILE_ID\");\r",
									"\r",
									"const body = pm.response.json();\r",
									"\r",
									"pm.test(\"articleId is correct\", function () {\r",
									"    pm.expect(body.articleId).to.eql($articleId.toString());\r",
									"});\r",
									" \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"length\", _.random(20,500));\r",
									"pm.variables.set(\"width\", _.random(20,500));\r",
									"pm.variables.set(\"height\", _.random(20,500));\r",
									"pm.variables.set(\"weight\", _.random(100,1000));\r",
									"pm.variables.set(\"piecesPerStorageBox\", _.random(1,500));\r",
									"pm.variables.set(\"plannedSalesPerWeek\", _.random(1,200000));\r",
									"pm.variables.set(\"minimumIncomingAmount\", _.random(1,1000));\r",
									"\r",
									"var categories = [\"Lebensmittel\", \"Tiernahrung\", \"Kitex\"];\r",
									"pm.variables.set(\"category\", categories[Math.floor(Math.random() * categories.length)]);\r",
									"\r",
									"var statuses = [\"active\", \"inactive\"];\r",
									"pm.variables.set(\"status\", statuses[Math.floor(Math.random() * statuses.length)]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"length\": {{length}},\r\n    \"width\": {{width}},\r\n    \"height\": {{height}},\r\n    \"weight\": {{weight}},\r\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\r\n    \"category\": \"{{category}}\",\r\n    \"dangerousGoods\": \"1\",\r\n    \"plannedSalesPerWeek\": {{plannedSalesPerWeek}},\r\n    \"minimumIncomingAmount\": {{minimumIncomingAmount}},\r\n    \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/articles?articleId={{ARTILE_ID}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "articleId",
									"value": "{{ARTILE_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article - Error - Empty Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json().body[0]).to.eql(\"status must not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var articleId = uuid.v4();\r",
									"\r",
									"pm.variables.set(\"articleId\", articleId);\r",
									"pm.variables.set(\"length\", _.random(20,500));\r",
									"pm.variables.set(\"width\", _.random(20,500));\r",
									"pm.variables.set(\"height\", _.random(20,500));\r",
									"pm.variables.set(\"weight\", _.random(100,1000));\r",
									"pm.variables.set(\"piecesPerStorageBox\", _.random(1,500));\r",
									"pm.variables.set(\"plannedSalesPerWeek\", _.random(1,200000));\r",
									"pm.variables.set(\"minimumIncomingAmount\", _.random(1,1000));\r",
									"\r",
									"var categories = [\"Lebensmittel\", \"Tiernahrung\", \"Kitex\"];\r",
									"pm.variables.set(\"category\", categories[Math.floor(Math.random() * categories.length)]);\r",
									"\r",
									"var statuses = [\"active\", \"inactive\"];\r",
									"pm.variables.set(\"status\", statuses[Math.floor(Math.random() * statuses.length)]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"length\": {{length}},\r\n    \"width\": {{width}},\r\n    \"height\": {{height}},\r\n    \"weight\": {{weight}},\r\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\r\n    \"category\": \"{{category}}\",\r\n    \"dangerousGoods\": \"1\",\r\n    \"plannedSalesPerWeek\": {{plannedSalesPerWeek}},\r\n    \"minimumIncomingAmount\": {{minimumIncomingAmount}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/articles?articleId={{articleId}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "articleId",
									"value": "{{articleId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article - Error - Empty Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json().body[0]).to.eql(\"category must not be empty\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var articleId = uuid.v4();\r",
									"\r",
									"pm.variables.set(\"articleId\", articleId);\r",
									"pm.variables.set(\"length\", _.random(20,500));\r",
									"pm.variables.set(\"width\", _.random(20,500));\r",
									"pm.variables.set(\"height\", _.random(20,500));\r",
									"pm.variables.set(\"weight\", _.random(100,1000));\r",
									"pm.variables.set(\"piecesPerStorageBox\", _.random(1,500));\r",
									"pm.variables.set(\"plannedSalesPerWeek\", _.random(1,200000));\r",
									"pm.variables.set(\"minimumIncomingAmount\", _.random(1,1000));\r",
									"\r",
									"var categories = [\"Lebensmittel\", \"Tiernahrung\", \"Kitex\"];\r",
									"pm.variables.set(\"category\", categories[Math.floor(Math.random() * categories.length)]);\r",
									"\r",
									"var statuses = [\"active\", \"inactive\"];\r",
									"pm.variables.set(\"status\", statuses[Math.floor(Math.random() * statuses.length)]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"length\": {{length}},\r\n    \"width\": {{width}},\r\n    \"height\": {{height}},\r\n    \"weight\": {{weight}},\r\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\r\n    \"dangerousGoods\": \"1\",\r\n    \"plannedSalesPerWeek\": {{plannedSalesPerWeek}},\r\n    \"minimumIncomingAmount\": {{minimumIncomingAmount}},\r\n    \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/articles?articleId={{articleId}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "articleId",
									"value": "{{articleId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article - Error - Empty Weight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json().body[0]).to.eql(\"weight must not be null\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var articleId = uuid.v4();\r",
									"\r",
									"pm.variables.set(\"articleId\", articleId);\r",
									"pm.variables.set(\"length\", _.random(20,500));\r",
									"pm.variables.set(\"width\", _.random(20,500));\r",
									"pm.variables.set(\"height\", _.random(20,500));\r",
									"pm.variables.set(\"weight\", _.random(100,1000));\r",
									"pm.variables.set(\"piecesPerStorageBox\", _.random(1,500));\r",
									"pm.variables.set(\"plannedSalesPerWeek\", _.random(1,200000));\r",
									"pm.variables.set(\"minimumIncomingAmount\", _.random(1,1000));\r",
									"\r",
									"var categories = [\"Lebensmittel\", \"Tiernahrung\", \"Kitex\"];\r",
									"pm.variables.set(\"category\", categories[Math.floor(Math.random() * categories.length)]);\r",
									"\r",
									"var statuses = [\"active\", \"inactive\"];\r",
									"pm.variables.set(\"status\", statuses[Math.floor(Math.random() * statuses.length)]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"length\": {{length}},\r\n    \"width\": {{width}},\r\n    \"height\": {{height}},\r\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\r\n    \"category\": \"{{category}}\",\r\n    \"dangerousGoods\": \"1\",\r\n    \"plannedSalesPerWeek\": {{plannedSalesPerWeek}},\r\n    \"minimumIncomingAmount\": {{minimumIncomingAmount}},\r\n    \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/articles?articleId={{articleId}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "articleId",
									"value": "{{articleId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article - Error - Empty Height",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json().body[0]).to.eql(\"height must not be null\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var articleId = uuid.v4();\r",
									"\r",
									"pm.variables.set(\"articleId\", articleId);\r",
									"pm.variables.set(\"length\", _.random(20,500));\r",
									"pm.variables.set(\"width\", _.random(20,500));\r",
									"pm.variables.set(\"height\", _.random(20,500));\r",
									"pm.variables.set(\"weight\", _.random(100,1000));\r",
									"pm.variables.set(\"piecesPerStorageBox\", _.random(1,500));\r",
									"pm.variables.set(\"plannedSalesPerWeek\", _.random(1,200000));\r",
									"pm.variables.set(\"minimumIncomingAmount\", _.random(1,1000));\r",
									"\r",
									"var categories = [\"Lebensmittel\", \"Tiernahrung\", \"Kitex\"];\r",
									"pm.variables.set(\"category\", categories[Math.floor(Math.random() * categories.length)]);\r",
									"\r",
									"var statuses = [\"active\", \"inactive\"];\r",
									"pm.variables.set(\"status\", statuses[Math.floor(Math.random() * statuses.length)]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"length\": {{length}},\r\n    \"width\": {{width}},\r\n    \"weight\": {{weight}},\r\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\r\n    \"category\": \"{{category}}\",\r\n    \"dangerousGoods\": \"1\",\r\n    \"plannedSalesPerWeek\": {{plannedSalesPerWeek}},\r\n    \"minimumIncomingAmount\": {{minimumIncomingAmount}},\r\n    \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/articles?articleId={{articleId}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "articleId",
									"value": "{{articleId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article - Error - Empty Width",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json().body[0]).to.eql(\"width must not be null\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var articleId = uuid.v4();\r",
									"\r",
									"pm.variables.set(\"articleId\", articleId);\r",
									"pm.variables.set(\"length\", _.random(20,500));\r",
									"pm.variables.set(\"width\", _.random(20,500));\r",
									"pm.variables.set(\"height\", _.random(20,500));\r",
									"pm.variables.set(\"weight\", _.random(100,1000));\r",
									"pm.variables.set(\"piecesPerStorageBox\", _.random(1,500));\r",
									"pm.variables.set(\"plannedSalesPerWeek\", _.random(1,200000));\r",
									"pm.variables.set(\"minimumIncomingAmount\", _.random(1,1000));\r",
									"\r",
									"var categories = [\"Lebensmittel\", \"Tiernahrung\", \"Kitex\"];\r",
									"pm.variables.set(\"category\", categories[Math.floor(Math.random() * categories.length)]);\r",
									"\r",
									"var statuses = [\"active\", \"inactive\"];\r",
									"pm.variables.set(\"status\", statuses[Math.floor(Math.random() * statuses.length)]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"length\": {{length}},\r\n    \"height\": {{height}},\r\n    \"weight\": {{weight}},\r\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\r\n    \"category\": \"{{category}}\",\r\n    \"dangerousGoods\": \"1\",\r\n    \"plannedSalesPerWeek\": {{plannedSalesPerWeek}},\r\n    \"minimumIncomingAmount\": {{minimumIncomingAmount}},\r\n    \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/articles?articleId={{articleId}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "articleId",
									"value": "{{articleId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article - Error - Empty Length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json().body[0]).to.eql(\"length must not be null\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var articleId = uuid.v4();\r",
									"\r",
									"pm.variables.set(\"articleId\", articleId);\r",
									"pm.variables.set(\"length\", _.random(20,500));\r",
									"pm.variables.set(\"width\", _.random(20,500));\r",
									"pm.variables.set(\"height\", _.random(20,500));\r",
									"pm.variables.set(\"weight\", _.random(100,1000));\r",
									"pm.variables.set(\"piecesPerStorageBox\", _.random(1,500));\r",
									"pm.variables.set(\"plannedSalesPerWeek\", _.random(1,200000));\r",
									"pm.variables.set(\"minimumIncomingAmount\", _.random(1,1000));\r",
									"\r",
									"var categories = [\"Lebensmittel\", \"Tiernahrung\", \"Kitex\"];\r",
									"pm.variables.set(\"category\", categories[Math.floor(Math.random() * categories.length)]);\r",
									"\r",
									"var statuses = [\"active\", \"inactive\"];\r",
									"pm.variables.set(\"status\", statuses[Math.floor(Math.random() * statuses.length)]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"width\": {{width}},\r\n    \"height\": {{height}},\r\n    \"weight\": {{weight}},\r\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\r\n    \"category\": \"{{category}}\",\r\n    \"dangerousGoods\": \"1\",\r\n    \"plannedSalesPerWeek\": {{plannedSalesPerWeek}},\r\n    \"minimumIncomingAmount\": {{minimumIncomingAmount}},\r\n    \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/articles?articleId={{articleId}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "articleId",
									"value": "{{articleId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Article - Error - Invalid Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Category does not exist\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Category zzzyyyccc does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var articleId = uuid.v4();\r",
									"\r",
									"pm.variables.set(\"articleId\", articleId);\r",
									"pm.variables.set(\"length\", _.random(20,500));\r",
									"pm.variables.set(\"width\", _.random(20,500));\r",
									"pm.variables.set(\"height\", _.random(20,500));\r",
									"pm.variables.set(\"weight\", _.random(100,1000));\r",
									"pm.variables.set(\"piecesPerStorageBox\", _.random(1,500));\r",
									"pm.variables.set(\"plannedSalesPerWeek\", _.random(1,200000));\r",
									"pm.variables.set(\"minimumIncomingAmount\", _.random(1,1000));\r",
									"pm.variables.set(\"category\", \"zzzyyyccc\");\r",
									"\r",
									"var statuses = [\"active\", \"inactive\"];\r",
									"pm.variables.set(\"status\", statuses[Math.floor(Math.random() * statuses.length)]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"length\": {{length}},\r\n    \"width\": {{width}},\r\n    \"height\": {{height}},\r\n    \"weight\": {{weight}},\r\n    \"piecesPerStorageBox\": {{piecesPerStorageBox}},\r\n    \"category\": \"{{category}}\",\r\n    \"dangerousGoods\": \"1\",\r\n    \"plannedSalesPerWeek\": {{plannedSalesPerWeek}},\r\n    \"minimumIncomingAmount\": {{minimumIncomingAmount}},\r\n    \"status\": \"{{status}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/articles?articleId={{articleId}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"articles"
							],
							"query": [
								{
									"key": "articleId",
									"value": "{{articleId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Location",
			"item": [
				{
					"name": "Create Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stock was updated.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ok\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/handlingUnits?handlingUnitId=L0001",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"handlingUnits"
							],
							"query": [
								{
									"key": "handlingUnitId",
									"value": "L0001"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Stock",
			"item": [
				{
					"name": "Create Stock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"$articleId = pm.collectionVariables.get(\"ARTILE_ID\");\r",
									"\r",
									"pm.variables.set(\"articleId\", $articleId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stocks\": [\r\n    {\r\n      \"quantity\": 10,\r\n      \"handlingUnit\": \"L0001\",\r\n      \"article\": \"{{articleId}}\",\r\n      \"status\": \"ok\"\r\n    }\r\n  ],\r\n  \"hasApproachingBoxes\": true,\r\n  \"status\": \"ok\",\r\n  \"category\": \"Rest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/stocks?locationId=L0001",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"stocks"
							],
							"query": [
								{
									"key": "locationId",
									"value": "L0001"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Stock - Dummy Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stocks\": [\r\n    {\r\n      \"quantity\": 10,\r\n      \"handlingUnit\": \"L0001\",\r\n      \"status\": \"ok\"\r\n    }\r\n  ],\r\n  \"hasApproachingBoxes\": true,\r\n  \"status\": \"ok\",\r\n  \"category\": \"Rest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/stocks?locationId=L0001",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"stocks"
							],
							"query": [
								{
									"key": "locationId",
									"value": "L0001"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Stock - Error - Invalid Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"$locationId = pm.variables.get(\"locationId\")\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Location \" + $locationId + \" does not exist\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var locationId = uuid.v4();\r",
									"\r",
									"$articleId = pm.collectionVariables.get(\"ARTILE_ID\");\r",
									"\r",
									"pm.variables.set(\"articleId\", $articleId);\r",
									"pm.variables.set(\"locationId\", locationId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stocks\": [\r\n    {\r\n      \"quantity\": 10,\r\n      \"handlingUnit\": \"L0001\",\r\n      \"article\": \"{{articleId}}\",\r\n      \"status\": \"ok\"\r\n    }\r\n  ],\r\n  \"hasApproachingBoxes\": true,\r\n  \"status\": \"ok\",\r\n  \"category\": \"Rest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/stocks?locationId={{locationId}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"stocks"
							],
							"query": [
								{
									"key": "locationId",
									"value": "{{locationId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Stock - Error - Invalid Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"$category = pm.variables.get(\"category\")\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Location category \" + $category + \" does not exist\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var category = uuid.v4();\r",
									"\r",
									"$articleId = pm.collectionVariables.get(\"ARTILE_ID\");\r",
									"\r",
									"pm.variables.set(\"articleId\", $articleId);\r",
									"pm.variables.set(\"category\", category);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stocks\": [\r\n    {\r\n      \"quantity\": 10,\r\n      \"handlingUnit\": \"L0001\",\r\n      \"article\": \"{{articleId}}\",\r\n      \"status\": \"ok\"\r\n    }\r\n  ],\r\n  \"hasApproachingBoxes\": true,\r\n  \"status\": \"ok\",\r\n  \"category\": \"{{category}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/stocks?locationId=L0001",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"stocks"
							],
							"query": [
								{
									"key": "locationId",
									"value": "L0001"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Stock - Error - Invalid Handling Unit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"$handlingUnit = pm.variables.get(\"handlingUnit\")\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Handling unit \" + $handlingUnit + \" does not exist\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var handlingUnit = uuid.v4();\r",
									"\r",
									"$articleId = pm.collectionVariables.get(\"ARTILE_ID\");\r",
									"\r",
									"pm.variables.set(\"articleId\", $articleId);\r",
									"pm.variables.set(\"handlingUnit\", handlingUnit);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stocks\": [\r\n    {\r\n      \"quantity\": 10,\r\n      \"handlingUnit\": \"{{handlingUnit}}\",\r\n      \"article\": \"{{articleId}}\",\r\n      \"status\": \"ok\"\r\n    }\r\n  ],\r\n  \"hasApproachingBoxes\": true,\r\n  \"status\": \"ok\",\r\n  \"category\": \"Rest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/stocks?locationId=L0001",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"stocks"
							],
							"query": [
								{
									"key": "locationId",
									"value": "L0001"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Stock - Error - Invalid Article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"$articleId = pm.variables.get(\"articleId\")\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Article \" + $articleId + \" does not exist\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');\r",
									"var articleId = uuid.v4();\r",
									"\r",
									"pm.variables.set(\"articleId\", articleId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"stocks\": [\r\n    {\r\n      \"quantity\": 10,\r\n      \"handlingUnit\": \"L0001\",\r\n      \"article\": \"{{articleId}}\",\r\n      \"status\": \"ok\"\r\n    }\r\n  ],\r\n  \"hasApproachingBoxes\": true,\r\n  \"status\": \"ok\",\r\n  \"category\": \"Rest\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/stocks?locationId=L0001",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"stocks"
							],
							"query": [
								{
									"key": "locationId",
									"value": "L0001"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "New Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"$clientId = pm.collectionVariables.get(\"clientId\");\r",
									"\r",
									"$orderId = pm.variables.get(\"orderNumber\");\r",
									"$knownDate = pm.variables.get(\"knownDate\");\r",
									"$loadingDeadlineDate = pm.variables.get(\"loadingDeadlineDate\");\r",
									"\r",
									"const body = pm.response.json();\r",
									"\r",
									"pm.test(\"clientId is 109\", function () {\r",
									"    pm.expect(body.clientId).to.eql($clientId.toString());\r",
									"});\r",
									"\r",
									"pm.test(\"orderId is correct\", function () {\r",
									"    pm.expect(body.orderId).to.eql($orderId);\r",
									"});\r",
									"\r",
									"pm.test(\"knownDate is correct\", function () {\r",
									"    var $isSame = moment(body.knownDate).isSame($knownDate);\r",
									"\r",
									"    pm.expect($isSame).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"loadingDeadlineDate is correct\", function () {\r",
									"    var $isSame = moment(body.loadingDeadlineDate).isSame($loadingDeadlineDate);\r",
									"\r",
									"    pm.expect($isSame).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Location is present in head\", function () {\r",
									"    pm.response.to.have.header(\"Location\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var uuid = require('uuid');\r",
									"var orderId = uuid.v4();\r",
									"\r",
									"pm.collectionVariables.set(\"ORDER_ID\", orderId);\r",
									"\r",
									"var knownMoment = moment().subtract(3, 'days');\r",
									"var futureMoment = moment().add(2, 'days');\r",
									"\r",
									"pm.variables.set(\"orderNumber\", orderId);\r",
									"pm.variables.set(\"knownDate\", knownMoment.format());\r",
									"pm.variables.set(\"loadingDeadlineDate\", futureMoment.format());\r",
									"\r",
									"var packages = [\"dm146\", \"dm125\", \"dm104\"];\r",
									"pm.variables.set(\"packageType\", packages[Math.floor(Math.random() * packages.length)]);\r",
									"\r",
									"var orderTypes = [\"YNOH\", \"YUMX\", \"RBLV\"];\r",
									"pm.variables.set(\"orderType\", orderTypes[Math.floor(Math.random() * orderTypes.length)]);\r",
									"\r",
									"pm.variables.set(\"priority\", _.random(0, 5));\r",
									"\r",
									"var orderLines = [];\r",
									"\r",
									"for (var _i = 1; _i <= 15; _i++) {\r",
									"    var orderLine = {\r",
									"        line: _i.toString(),\r",
									"        article: \"{{ARTILE_ID}}\",\r",
									"        quantity: _.random(1,200)\r",
									"    };\r",
									"\r",
									"    orderLines.push(orderLine);\r",
									"}\r",
									"\r",
									"pm.variables.set(\"orderLines\", JSON.stringify(orderLines));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"knownDate\": \"{{knownDate}}\",\r\n  \"loadingDeadlineDate\": \"{{loadingDeadlineDate}}\",\r\n  \"packageType\": \"{{packageType}}\",\r\n  \"priority\": {{priority}},\r\n  \"carrier\": \"DHL\",\r\n  \"orderType\": \"{{orderType}}\",\r\n  \"orderlines\": {{orderLines}},\r\n  \"maxPackageWeight\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/orders?orderId={{orderNumber}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{orderNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New Order - Error - Invalid maxPackageWeight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var uuid = require('uuid');\r",
									"var orderId = uuid.v4();\r",
									"\r",
									"var knownMoment = moment().subtract(3, 'days');\r",
									"var futureMoment = moment().add(2, 'days');\r",
									"\r",
									"pm.variables.set(\"orderNumber\", orderId);\r",
									"pm.variables.set(\"knownDate\", knownMoment.format());\r",
									"pm.variables.set(\"loadingDeadlineDate\", futureMoment.format());\r",
									"\r",
									"var packages = [\"dm146\", \"dm125\", \"dm104\"];\r",
									"pm.variables.set(\"packageType\", packages[Math.floor(Math.random() * packages.length)]);\r",
									"\r",
									"var orderTypes = [\"YNOH\", \"YUMX\", \"RBLV\"];\r",
									"pm.variables.set(\"orderType\", orderTypes[Math.floor(Math.random() * orderTypes.length)]);\r",
									"\r",
									"pm.variables.set(\"priority\", _.random(0, 5));\r",
									"\r",
									"var orderLines = [];\r",
									"\r",
									"for (var _i = 1; _i <= 15; _i++) {\r",
									"    var orderLine = {\r",
									"        line: _i.toString(),\r",
									"        article: \"{{ARTILE_ID}}\",\r",
									"        quantity: _.random(1,200)\r",
									"    };\r",
									"\r",
									"    orderLines.push(orderLine);\r",
									"}\r",
									"\r",
									"pm.variables.set(\"orderLines\", JSON.stringify(orderLines));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"knownDate\": \"{{knownDate}}\",\r\n  \"loadingDeadlineDate\": \"{{loadingDeadlineDate}}\",\r\n  \"packageType\": \"{{packageType}}\",\r\n  \"priority\": {{priority}},\r\n  \"carrier\": \"DHL\",\r\n  \"orderType\": \"{{orderType}}\",\r\n  \"orderlines\": {{orderLines}},\r\n  \"maxPackageWeight\": -10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/orders?orderId={{orderNumber}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{orderNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New Order - Error - Invalid Order Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Order type does not exist\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Order type xxxyyyzzz does not exist\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var uuid = require('uuid');\r",
									"var orderId = uuid.v4();\r",
									"\r",
									"var knownMoment = moment().subtract(3, 'days');\r",
									"var futureMoment = moment().add(2, 'days');\r",
									"\r",
									"pm.variables.set(\"orderNumber\", orderId);\r",
									"pm.variables.set(\"knownDate\", knownMoment.format());\r",
									"pm.variables.set(\"loadingDeadlineDate\", futureMoment.format());\r",
									"\r",
									"var packages = [\"dm146\", \"dm125\", \"dm104\"];\r",
									"pm.variables.set(\"packageType\", packages[Math.floor(Math.random() * packages.length)]);\r",
									"\r",
									"pm.variables.set(\"orderType\", \"xxxyyyzzz\");\r",
									"\r",
									"pm.variables.set(\"priority\", _.random(0, 5));\r",
									"\r",
									"var orderLines = [];\r",
									"\r",
									"for (var _i = 1; _i <= 15; _i++) {\r",
									"    var orderLine = {\r",
									"        line: _i.toString(),\r",
									"        article: \"{{ARTILE_ID}}\",\r",
									"        quantity: _.random(1,200)\r",
									"    };\r",
									"\r",
									"    orderLines.push(orderLine);\r",
									"}\r",
									"\r",
									"pm.variables.set(\"orderLines\", JSON.stringify(orderLines));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"knownDate\": \"{{knownDate}}\",\r\n  \"loadingDeadlineDate\": \"{{loadingDeadlineDate}}\",\r\n  \"packageType\": \"{{packageType}}\",\r\n  \"priority\": {{priority}},\r\n  \"carrier\": \"DHL\",\r\n  \"orderType\": \"{{orderType}}\",\r\n  \"orderlines\": {{orderLines}},\r\n  \"maxPackageWeight\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/orders?orderId={{orderNumber}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{orderNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New Order - Error - Invalid Carrier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Carrier does not exist\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Carrier ABCDEF does not exist\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var uuid = require('uuid');\r",
									"var orderId = uuid.v4();\r",
									"\r",
									"var knownMoment = moment().subtract(3, 'days');\r",
									"var futureMoment = moment().add(2, 'days');\r",
									"\r",
									"pm.variables.set(\"orderNumber\", orderId);\r",
									"pm.variables.set(\"knownDate\", knownMoment.format());\r",
									"pm.variables.set(\"loadingDeadlineDate\", futureMoment.format());\r",
									"\r",
									"var packages = [\"dm146\", \"dm125\", \"dm104\"];\r",
									"pm.variables.set(\"packageType\", packages[Math.floor(Math.random() * packages.length)]);\r",
									"\r",
									"var orderTypes = [\"YNOH\", \"YUMX\", \"RBLV\"];\r",
									"pm.variables.set(\"orderType\", orderTypes[Math.floor(Math.random() * orderTypes.length)]);\r",
									"\r",
									"pm.variables.set(\"priority\", _.random(0, 5));\r",
									"\r",
									"var orderLines = [];\r",
									"\r",
									"for (var _i = 1; _i <= 15; _i++) {\r",
									"    var orderLine = {\r",
									"        line: _i.toString(),\r",
									"        article: \"{{ARTILE_ID}}\",\r",
									"        quantity: _.random(1,200)\r",
									"    };\r",
									"\r",
									"    orderLines.push(orderLine);\r",
									"}\r",
									"\r",
									"pm.variables.set(\"orderLines\", JSON.stringify(orderLines));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"knownDate\": \"{{knownDate}}\",\r\n  \"loadingDeadlineDate\": \"{{loadingDeadlineDate}}\",\r\n  \"packageType\": \"{{packageType}}\",\r\n  \"priority\": {{priority}},\r\n  \"carrier\": \"ABCDEF\",\r\n  \"orderType\": \"{{orderType}}\",\r\n  \"orderlines\": {{orderLines}},\r\n  \"maxPackageWeight\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/orders?orderId={{orderNumber}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{orderNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "New Order - Error - Invalid Package Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Package type does not exist\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Package type abcdef does not exist\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"var uuid = require('uuid');\r",
									"var orderId = uuid.v4();\r",
									"\r",
									"var knownMoment = moment().subtract(3, 'days');\r",
									"var futureMoment = moment().add(2, 'days');\r",
									"\r",
									"pm.variables.set(\"orderNumber\", orderId);\r",
									"pm.variables.set(\"knownDate\", knownMoment.format());\r",
									"pm.variables.set(\"loadingDeadlineDate\", futureMoment.format());\r",
									"\r",
									"pm.variables.set(\"packageType\", \"abcdef\");\r",
									"\r",
									"var orderTypes = [\"YNOH\", \"YUMX\", \"RBLV\"];\r",
									"pm.variables.set(\"orderType\", orderTypes[Math.floor(Math.random() * orderTypes.length)]);\r",
									"\r",
									"pm.variables.set(\"priority\", _.random(0, 5));\r",
									"\r",
									"var orderLines = [];\r",
									"\r",
									"for (var _i = 1; _i <= 15; _i++) {\r",
									"    var orderLine = {\r",
									"        line: _i.toString(),\r",
									"        article: \"{{ARTILE_ID}}\",\r",
									"        quantity: _.random(1,200)\r",
									"    };\r",
									"\r",
									"    orderLines.push(orderLine);\r",
									"}\r",
									"\r",
									"pm.variables.set(\"orderLines\", JSON.stringify(orderLines));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"knownDate\": \"{{knownDate}}\",\r\n  \"loadingDeadlineDate\": \"{{loadingDeadlineDate}}\",\r\n  \"packageType\": \"{{packageType}}\",\r\n  \"priority\": {{priority}},\r\n  \"carrier\": \"DHL\",\r\n  \"orderType\": \"{{orderType}}\",\r\n  \"orderlines\": {{orderLines}},\r\n  \"maxPackageWeight\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/orders?orderId={{orderNumber}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{orderNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlClient}}/orders?orderId={{ORDER_ID}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{ORDER_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stock was updated.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ok\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/handlingUnits?handlingUnitId=DLR-4-223-1-212",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"handlingUnits"
							],
							"query": [
								{
									"key": "handlingUnitId",
									"value": "DLR-4-223-1-212"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Stock was updated.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ok\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/handlingUnits?handlingUnitId=K-42-134-313-10",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"handlingUnits"
							],
							"query": [
								{
									"key": "handlingUnitId",
									"value": "K-42-134-313-10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order Reservations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');",
									"var reserveId1 = uuid.v4();",
									"var reserveId2 = uuid.v4();",
									"",
									"pm.variables.set(\"reserveId1\", reserveId1);",
									"pm.variables.set(\"reserveId2\", reserveId2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"orderline\":\r\n  [\r\n    {\r\n      \"orderlineReservations\":\r\n      [\r\n        {\r\n          \"clientReservationId\": \"{{reserveId1}}\",\r\n          \"quantity\": 2.000,\r\n          \"pickLocation\": \"DLR-4-223-1-212\",\r\n          \"releaseDate\": \"2018-03-07T14:21:07\",\r\n          \"reservationDate\": \"2018-03-07T14:21:07\"\r\n        },\r\n        {\r\n          \"clientReservationId\": \"{{reserveId2}}\",\r\n          \"quantity\": 1.000,\r\n          \"pickLocation\": \"K-42-134-313-10\",\r\n          \"releaseDate\": \"2018-03-07T14:21:07\",\r\n          \"reservationDate\": \"2018-03-07T14:21:07\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/orders/orderlines?orderId={{ORDER_ID}}&orderLineId=1",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"orders",
								"orderlines"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{ORDER_ID}}"
								},
								{
									"key": "orderLineId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order Reservations - Error - Invalid Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"$orderId = pm.variables.get(\"orderId\");\r",
									"$clientId = pm.collectionVariables.get(\"clientId\");\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Order \" + $orderId + \" does not exist for client \" + $clientId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');",
									"var orderId = uuid.v4();",
									"",
									"pm.variables.set(\"orderId\", orderId);",
									"",
									"var reserveId1 = uuid.v4();",
									"var reserveId2 = uuid.v4();",
									"",
									"pm.variables.set(\"reserveId1\", reserveId1);",
									"pm.variables.set(\"reserveId2\", reserveId2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"orderline\":\r\n  [\r\n    {\r\n      \"orderlineReservations\":\r\n      [\r\n        {\r\n          \"clientReservationId\": \"{{reserveId1}}\",\r\n          \"quantity\": 2.000,\r\n          \"pickLocation\": \"DLR-4-223-1-212\",\r\n          \"releaseDate\": \"2018-03-07T14:21:07\",\r\n          \"reservationDate\": \"2018-03-07T14:21:07\"\r\n        },\r\n        {\r\n          \"clientReservationId\": \"{{reserveId2}}\",\r\n          \"quantity\": 1.000,\r\n          \"pickLocation\": \"K-42-134-313-10\",\r\n          \"releaseDate\": \"2018-03-07T14:21:07\",\r\n          \"reservationDate\": \"2018-03-07T14:21:07\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/orders/orderlines?orderId={{orderId}}&orderLineId=1",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"orders",
								"orderlines"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								},
								{
									"key": "orderLineId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order Reservations - Error - Invalid Order Line",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Order line 20 does not exist\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');",
									"",
									"var reserveId1 = uuid.v4();",
									"var reserveId2 = uuid.v4();",
									"",
									"pm.variables.set(\"reserveId1\", reserveId1);",
									"pm.variables.set(\"reserveId2\", reserveId2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"orderline\":\r\n  [\r\n    {\r\n      \"orderlineReservations\":\r\n      [\r\n        {\r\n          \"clientReservationId\": \"{{reserveId1}}\",\r\n          \"quantity\": 2.000,\r\n          \"pickLocation\": \"DLR-4-223-1-212\",\r\n          \"releaseDate\": \"2018-03-07T14:21:07\",\r\n          \"reservationDate\": \"2018-03-07T14:21:07\"\r\n        },\r\n        {\r\n          \"clientReservationId\": \"{{reserveId2}}\",\r\n          \"quantity\": 1.000,\r\n          \"pickLocation\": \"K-42-134-313-10\",\r\n          \"releaseDate\": \"2018-03-07T14:21:07\",\r\n          \"reservationDate\": \"2018-03-07T14:21:07\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/orders/orderlines?orderId={{ORDER_ID}}&orderLineId=20",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"orders",
								"orderlines"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{ORDER_ID}}"
								},
								{
									"key": "orderLineId",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders for BFT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid =  require(\"uuid\")",
									"var randomUuid = uuid.v4(); ",
									"",
									"pm.environment.set(\"idemotencyKey\", randomUuid.substring(12))"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Idempotency-Key",
								"value": "{{idemotencyKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/releasableOrders?reservationType=BFT&numberOfOrders={{$randomInt}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"releasableOrders"
							],
							"query": [
								{
									"key": "reservationType",
									"value": "BFT"
								},
								{
									"key": "numberOfOrders",
									"value": "{{$randomInt}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Orders for AKL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Idempotency-Key",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/releasableOrders?reservationType=AKL&numberOfOrders={{$randomInt}}&workstationId=KPAQ103",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"releasableOrders"
							],
							"query": [
								{
									"key": "reservationType",
									"value": "AKL"
								},
								{
									"key": "numberOfOrders",
									"value": "{{$randomInt}}"
								},
								{
									"key": "workstationId",
									"value": "KPAQ103"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tour",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Idempotency-Key",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/tours?tourTypes=WEISS",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"tours"
							],
							"query": [
								{
									"key": "tourTypes",
									"value": "WEISS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tour Confirmation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Tour 1 does not exist\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"in_progress\",\r\n    \"cartId\": \"037\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/tours?tourId=1",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"tours"
							],
							"query": [
								{
									"key": "tourId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "HandlingUnit Start",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var randomInt = pm.variables.get(\"randomInt\");\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Picklist \" + randomInt + \" does not exist\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomInt = _.random(1,20000);",
									"",
									"pm.variables.set(\"randomInt\", randomInt);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Idempotency-Key",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"box\": \r\n    {\r\n        \"handlingUnitId\": \"LOXXITone144323242\",\r\n        \"startDate\": \"2018-03-07T17:18:02\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/picklistStarts?picklistId={{randomInt}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"picklistStarts"
							],
							"query": [
								{
									"key": "picklistId",
									"value": "{{randomInt}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Order Priority Change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"priority\", _.random(0, 5));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Idempotency-Key",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"priority\": {{priority}}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/orders?orderId={{ORDER_ID}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{ORDER_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Idempotency-Key",
								"value": "{{$guid}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/orders?orderId={{ORDER_ID}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{ORDER_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleted Order - Verify Deleted Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"$orderId = pm.collectionVariables.get(\"ORDER_ID\");\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Order \" + $orderId + \" was deleted\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlClient}}/orders?orderId={{ORDER_ID}}",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "orderId",
									"value": "{{ORDER_ID}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Workstation",
			"item": [
				{
					"name": "AKL Workstation logged in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"loggedIn\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/workstations/kpaq101",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"workstations",
								"kpaq101"
							]
						}
					},
					"response": []
				},
				{
					"name": "AKL Workstation logged out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"loggedOut\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/workstations/kpaq101",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"workstations",
								"kpaq101"
							]
						}
					},
					"response": []
				},
				{
					"name": "Departure Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Departure accepted.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"departure\": \"345233\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/workstations/kpaq101",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"workstations",
								"kpaq101"
							]
						}
					},
					"response": []
				},
				{
					"name": "Arrival Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Arrival accepted.\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"arrival\": \"345233\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/workstations/kpaq101",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"workstations",
								"kpaq101"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Device",
			"item": [
				{
					"name": "Device Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.json().message).to.eql(\"Device bft024 not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"on\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrlClient}}/devices/bft024",
							"host": [
								"{{baseUrlClient}}"
							],
							"path": [
								"devices",
								"bft024"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HealthCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"API is up and running!\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/version",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"version"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "in",
				"value": "header",
				"type": "string"
			},
			{
				"key": "value",
				"value": "abc",
				"type": "string"
			},
			{
				"key": "key",
				"value": "ApiKey",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "server",
			"value": "10.99.10.120"
		},
		{
			"key": "baseUrl",
			"value": "http://{{server}}/losrestapi"
		},
		{
			"key": "baseUrlClient",
			"value": "{{baseUrl}}/clients/109"
		},
		{
			"key": "apiKey",
			"value": "abc"
		},
		{
			"key": "clientId",
			"value": "109"
		},
		{
			"key": "ARTILE_ID",
			"value": ""
		},
		{
			"key": "ORDER_ID",
			"value": ""
		}
	]
}
